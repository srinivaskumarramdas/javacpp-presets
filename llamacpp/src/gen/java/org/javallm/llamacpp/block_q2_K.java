// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.ggml.*;

// #endif
// #endif

//
// Super-block quantization structures
//

// 2-bit quantization
// weight is represented as x = a * q + b
// 16 blocks of 16 elemenets each
// Effectively 2.5625 bits per weight
@Properties(inherit = org.javallm.llamacpp.presets.ggml.class)
public class block_q2_K extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public block_q2_K() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public block_q2_K(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public block_q2_K(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public block_q2_K position(long position) {
        return (block_q2_K)super.position(position);
    }
    @Override public block_q2_K getPointer(long i) {
        return new block_q2_K((Pointer)this).offsetAddress(i);
    }

    public native @Cast("uint8_t") byte scales(int i); public native block_q2_K scales(int i, byte setter);
    @MemberGetter public native @Cast("uint8_t*") BytePointer scales(); // scales and mins, quantized with 4 bits
    public native @Cast("uint8_t") byte qs(int i); public native block_q2_K qs(int i, byte setter);
    @MemberGetter public native @Cast("uint8_t*") BytePointer qs();      // quants
    public native @Cast("ggml_fp16_t") short d(); public native block_q2_K d(short setter);           // super-block scale for quantized scales
    public native @Cast("ggml_fp16_t") short dmin(); public native block_q2_K dmin(short setter);        // super-block scale for quantized mins
}
