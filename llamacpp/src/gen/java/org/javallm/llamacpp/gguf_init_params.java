// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


    @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class gguf_init_params extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public gguf_init_params() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public gguf_init_params(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public gguf_init_params(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public gguf_init_params position(long position) {
            return (gguf_init_params)super.position(position);
        }
        @Override public gguf_init_params getPointer(long i) {
            return new gguf_init_params((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("bool") boolean no_alloc(); public native gguf_init_params no_alloc(boolean setter);

        // if not NULL, create a ggml_context and allocate the tensor data in it
        public native ggml_context ctx(int i); public native gguf_init_params ctx(int i, ggml_context setter);
        public native @Cast("ggml_context**") PointerPointer ctx(); public native gguf_init_params ctx(PointerPointer setter);
    }
