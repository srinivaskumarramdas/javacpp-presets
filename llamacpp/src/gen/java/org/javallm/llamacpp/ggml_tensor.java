// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


    // n-dimensional tensor
    @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class ggml_tensor extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ggml_tensor() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ggml_tensor(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ggml_tensor(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ggml_tensor position(long position) {
            return (ggml_tensor)super.position(position);
        }
        @Override public ggml_tensor getPointer(long i) {
            return new ggml_tensor((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("ggml_type") int type(); public native ggml_tensor type(int setter);
        public native @Cast("ggml_backend") int backend(); public native ggml_tensor backend(int setter);

        public native int n_dims(); public native ggml_tensor n_dims(int setter);
        public native @Cast("int64_t") long ne(int i); public native ggml_tensor ne(int i, long setter);
        @MemberGetter public native @Cast("int64_t*") LongPointer ne(); // number of elements
        public native @Cast("size_t") long nb(int i); public native ggml_tensor nb(int i, long setter);
        @MemberGetter public native @Cast("size_t*") SizeTPointer nb(); // stride in bytes:
                                   // nb[0] = sizeof(type)
                                   // nb[1] = nb[0]   * ne[0] + padding
                                   // nb[i] = nb[i-1] * ne[i-1]

        // compute data
        public native @Cast("ggml_op") int op(); public native ggml_tensor op(int setter);

        // op params - allocated as int32_t for alignment
        public native int op_params(int i); public native ggml_tensor op_params(int i, int setter);
        @MemberGetter public native IntPointer op_params();

        public native @Cast("bool") boolean is_param(); public native ggml_tensor is_param(boolean setter);

        public native ggml_tensor grad(); public native ggml_tensor grad(ggml_tensor setter);
        public native ggml_tensor src(int i); public native ggml_tensor src(int i, ggml_tensor setter);
        @MemberGetter public native @Cast("ggml_tensor**") PointerPointer src();

        // performance
        public native int perf_runs(); public native ggml_tensor perf_runs(int setter);
        public native @Cast("int64_t") long perf_cycles(); public native ggml_tensor perf_cycles(long setter);
        public native @Cast("int64_t") long perf_time_us(); public native ggml_tensor perf_time_us(long setter);

        public native Pointer data(); public native ggml_tensor data(Pointer setter);

        public native @Cast("char") byte name(int i); public native ggml_tensor name(int i, byte setter);
        @MemberGetter public native @Cast("char*") BytePointer name();

        public native Pointer extra(); public native ggml_tensor extra(Pointer setter); // extra things e.g. for ggml-cuda.cu

        public native @Cast("char") byte padding(int i); public native ggml_tensor padding(int i, byte setter);
        @MemberGetter public native @Cast("char*") BytePointer padding();
    }
